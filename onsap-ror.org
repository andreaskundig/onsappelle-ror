#+title: Onsap Ror
[[file:/mnt/c/Users/andre/workspace/onsappelle/onsappelle.org::][spec...]]

* doc for pages (+ turbo_frames)
** landing page
reminders/new.html.erb <- _form.html.erb
- date input field / (preferably no set date button)
- email input field / add user button
- create reminder button

possibility to add user
add user button turbo
- adds a user and a hidden input field (?)

*** implementation ideas
we start with a Reminder.new, without date or user

add user:
- creates or finds user
- creates reminder with user but without date
- redirects to show page


set date:
- create reminder with date but no user
- redirects to show

Problems
 Missing in show page
 - date input
 - validate users and date

date input or not?
no input but clicking on it turns it into input
 - click on date display: input turbo render edit,
 - click somewhere else: close inputs COMPLICATED



*** random notes
adding a recipient or a date should create a reminder
redirect to show

[+] needs to link to new_reminder_path

stimulus can be used to trigger a form submission when a date is chosen
https://stackoverflow.com/questions/68624668/how-can-i-submit-a-form-on-input-change-with-turbo-streams

** add recipient to existing reminder
/reminders/17 -> reminders/show.html.erb
[[file:app/views/reminders/show.html.erb::<h3>Recipients][adding recipient]] to reminder
#+begin_src erb
    <%= link_to "[+]", new_reminder_user_path(@reminder),
     data: {turbo_frame: 'new_user'}%>
#+end_src
reminders/show.html.erb has [[file:app/views/reminders/show.html.erb::<%= link_to "\[+\]", new_reminder_user_path(@reminder),][[+] link]] to add recipients
which goes to new_reminder_user_path
which is configured in [[file:config/routes.rb::resources :users do][routes.rb]]
to go first to users_controller.rb [[file:app/controllers/users_controller.rb::def new][new]]
which responds with template [[file:app/views/users/new.html.erb::<%= turbo_frame_tag "new_user" do %>][new.html.erb]]
which has a turbo frame with a form that triggers
users_controller.rb [[file:app/controllers/users_controller.rb::def create][create]]
which adds a user to the reminder and saves it
and responds with create.turbo_stream.erb
which [[file:app/views/users/create.turbo_stream.erb::partial: "users/user",][returns]] html generated from [[file:app/views/users/_user.html.erb::<%= turbo_frame_tag user do %>][_user.html.erb]]
and causes turbo to
- prepend the generated user html to the user list
- delete the user adding form

** delete recipient
every user on reminders/show.html.erb has a [[file:app/views/users/_user.html.erb::<%= link_to '\[-\]',][[-] link]]
which goes to remove_reminder_user_path
which is configured in [[file:config/routes.rb::delete 'remove', to: 'reminders#remove_user'][routes.rb]]
to trigger reminders_controller.rb [[file:app/controllers/reminders_controller.rb::def remove_user][remove_user]]
which deletes the relation in the db
and returns [[file:app/views/reminders/remove_user.turbo_stream.erb::<%= turbo_stream.remove @user %>][remove_user.turbo_stream.erb]]
which causes turbo to remove that user's turbo_frame
which reminders/show.html.erb got from [[file:app/views/users/_user.html.erb::<%= turbo_frame_tag user do %>][users/_user.html.rb]]

* TODO show page
activate reminder
- validation: date + emails > 0

- activate button

* TODO navigation: reminder creation paths

** /reminders/new
- date input
- existing emails (own?)  [remove] -> create -> edit
- email input [add]] -> create  -> edit

[save] -> create (status :active) -> show

currently
date, create reminders -> Reminder.new(date)



** /reminders/edit/:id

same form as for creation


** /reminders/show/:id

- date
- existing emails

[update]



* TODO rename reminder.users to .recipients
* TODO send emails at reminder date
* TODO refactor: remove unused routes controller methods
* TODO [[https://github.com/paper-trail-gem/paper_trail][paper_trail]] for reminders and  user_reminders
* TODO passwordless authentication by email
gem
https://github.com/mikker/passwordless

handrolled
https://blog.testdouble.com/posts/2022-10-25-building-passwordless-email-auth-in-rails/
with token
https://dev.to/phawk/password-less-auth-in-rails-4ah

* steps

[[https://guides.rubyonrails.org/association_basics.html#choosing-between-has-many-through-and-has-and-belongs-to-many][has-many :through relation]]
#+begin_src bash

$ rails new onsappelle-ror
$ cd onsappelle-ror

$ bin/rails generate model User email:string
$ bin/rails generate model Reminder date:datetime
$ bin/rails generate model UserReminder user:references reminder:references

$ bin/rails db:migrate

$ bin/rails generate controller Reminders index
$ bin/rails generate controller Users
#+end_src

* language server: solargraph
https://emacs-lsp.github.io/lsp-mode/page/lsp-solargraph/
https://github.com/castwide/solargraph
https://github.com/iftheshoefritz/solargraph-rails/
#+begin_src bash
gem install solargraph
gem install solargraph-rails
#+end_src
