#+title: Onsap Ror
[[file:/mnt/c/Users/andre/workspace/onsappelle/onsappelle.org::][spec...]]
* run the application
sudo service postgresql start
bin/rails server
* run a test
sudo service postgresql start
bin/rails test
# system test launches browser
bin/rails test test/system/reminders_test -n"/can_create_a/"
bin/rails test test/integration/reminder_flow_test -n"/can create a/"
* passwordless authentication by email
gem
https://github.com/mikker/passwordless
** magic link
There is an issue
[[https://github.com/mikker/passwordless/issues/70][Create auth token links for email]]
the readme once had a section
[[https://github.com/mikker/passwordless/blob/5b971d24e141aa6699eb510b051fb00ca4d463e2/README.md#generate-your-own-magic-links][generate your own magic links]]
The section disappeared with
[[https://github.com/mikker/passwordless/pull/153/files][this pull request]]
** alternatives
*** authentication-zero, rodauth ?
https://github.com/janko/rodauth-rails

[[https://bootrails.com/blog/generate-authentication-like-rails-8-will/][Generate authentication like Rails 8 will]]

https://github.com/lazaronixon/authentication-zero

http://rodauth.jeremyevans.net/documentation.html

https://www.reddit.com/r/rails/comments/1aczuiv/some_say_use_devise_some_say_authenticationzero/
- With authentication_zero you own the generated authentication code and you need to maintain it. Some experience in the language and the framework would be required to do it.
- Sorcery is minimalistic (in a good way) compared to Devise, which makes a lot of assumptions. You get the core part, you need to build the rest yourself and you probably need to know what you want.
- Rodauth is most advanced and most secure authentication solution for Ruby, but at the cost of some added complexity. For example, to use most secure features, you need to have a separate database user just for auth.
- built-in stuff in Rails is good enough for all cases (unlike some people like to mindlessly say, even for production apps), but you need to build something yourself and maintain it, similar case as with authentication_zero

*** handrolled
https://blog.testdouble.com/posts/2022-10-25-building-passwordless-email-auth-in-rails/
with token (handrolled)
https://dev.to/phawk/password-less-auth-in-rails-4ah

*** with devise
https://github.com/abevoelker/devise-passwordless
devise seems pretty heavy for something
that doesn't include passwordless...
** steps
#+begin_src bash
bundle add passwordless
bin/rails passwordless_engine:install:migrations
bin/rails db:migrate
#+end_src
** logic
no auth for homepage/new reminder
if current user is not among recipients
-> auth needed by one of them


validate reminder

everyone gets a link to unsubscribe

auth needed for show and list page
*** generate your own magic links
issue [[https://github.com/mikker/passwordless/issues/70][Create auth token links for email]]
This [[https://github.com/mikker/passwordless/pull/69/files/d490ec2829ebab25b65e44d0c74859c08ee1fe56][pull request]] added "Generate your own magic links"
to the [[https://github.com/mikker/passwordless/blob/5b971d24e141aa6699eb510b051fb00ca4d463e2/README.md#generate-your-own-magic-links][readme]]:
**** old readme
Currently there is not an officially supported way to generate your own magic links to send in your own mailers.

However, you can accomplish this with the following snippet of code.
#+begin_src ruby
session = Passwordless::Session.new({
  authenticatable: @manager,
  user_agent: 'Command Line',
  remote_addr: 'unknown',
})
session.save!
@magic_link = send(Passwordless.mounted_as).token_sign_in_url(session.token)
#+end_src

You can further customize this URL by specifying the destination path to be redirected to after the user has logged in. You can do this by adding the destination_path query parameter to the end of the URL. For example

#+begin_src ruby
@magic_link = "#{@magic_link}?destination_path=/your-custom-path"
#+end_src
**** pull request that removed it
presumably because user_agent and remote_addr
args were removed from Session.new
* security
https://guides.rubyonrails.org/security.html

set session expiry
https://github.com/mikker/passwordless?tab=readme-ov-file#timeout-and-expiry

validate  email

when adding title/description, use [[https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize][Rails.sanitize]]

set allowed hosts
https://guides.rubyonrails.org/security.html#dns-rebinding-and-host-header-attacks


* doc for pages (+ turbo_frames)
** add recipient to new reminder
[[file:app/views/reminders/new.html.erb::<%= render "form", reminder: @reminder %>][reminders/new]] renders
[[file:app/views/reminders/_form.html.erb::<%= render 'users/user_inputs', user: User.new %>][reminders/form]] which renders
[[file:app/views/users/_user_inputs.html.erb::<%= text_field_tag 'user\[email\]', '' %>][users/user_inputs]] which has a input field for the email
and posts to new_user_inputs_paths
which is configured in [[file:config/routes.rb::post 'new_user_inputs', to: 'users#new_inputs'][routes.rb]]
and calls [[file:app/controllers/users_controller.rb::def new_inputs][users_controller.new_inputs]]
which finds or creates a user
and returns [[file:app/views/users/new_inputs.turbo_stream.erb::<%= turbo_stream.append "recipients",][new_inputs.turbo_stream.erb]]
which changes reminders/form by
- adding a recipient with [[file:app/views/users/_user_hidden_inputs.html.erb::<%= hidden_field_tag 'users\[\]\[email\]', user.email, id: user.id %>][users/user_hidden_inputs]]
- displaying any errors in [[file:app/views/users/_user_inputs.html.erb::<% user.errors.full_messages_for(:email).each do |message| %>][users/user_inputs]]
- removing previous recipient errors

** remove recipient from new reminder
every recipient has an id build from the email
and a [-] link from [[file:app/views/users/_user_hidden_inputs.html.erb::<%= link_to '\[-\]',][users/user_hidden_inputs]]
which posts delete to remove_user_inputs_path
which is configured in [[file:config/routes.rb::delete 'remove_user_inputs/:email_code', to: 'users#remove_inputs', as: :remove_user_inputs][routes.rb]]
and calls [[file:app/controllers/users_controller.rb::def remove_inputs][users_controller.remove_inputs]]
which returns [[file:app/views/users/remove_inputs.turbo_stream.erb::<%= turbo_stream.remove "recipient_#{@email_code}" %>][remove_inputs.turbo_stream.rb]]
which removes the recipient where the [-] was clicked






* TODO upgrade to rails 8.0
at 7.1.2 there's a deprecation warning
DEPRECATION WARNING: ActiveSupport::ProxyObject is deprecated and will be removed in Rails 8.0.
Use Ruby's built-in BasicObject instead.

set a debugger in [[file:~/.rvm/gems/ruby-3.3.0/gems/activesupport-7.2.2/lib/active_support/deprecation/reporting.rb::message ||= "You are using deprecated behavior which will be removed from the next major or minor release."][reporting.rb]]
probably comes from [[file:~/.rvm/gems/ruby-3.3.0/gems/jbuilder-2.11.5/lib/jbuilder/jbuilder.rb::ActiveSupport::ProxyObject][jbuilder.rb]]
which uses BasicObject when ProxyObject is gone,
so it should be ok.

at 8.0.0
needed to upgrade rails-i18n and jbuilder
* TODO show page: edit date, more validation
activate reminder
- validation: date + emails > 0

validate email
* TODO ensure email field is empty at page load
which uses BasicObject when ProxyObject is gone,
so it should be ok
find out how this is filled...
* TODO rename reminder.users to .recipients
* TODO refactor: remove unused routes controller methods
* TODO [[https://github.com/paper-trail-gem/paper_trail][paper_trail]] for reminders and  user_reminders
* TODO Active Job adapter w persistent backend (sidekiq resque)

as recommended in the [[https://guides.rubyonrails.org/action_mailer_basics.html#calling-the-mailer][mailer doc]]
* steps
** rails generate stuff
[[https://guides.rubyonrails.org/association_basics.html#choosing-between-has-many-through-and-has-and-belongs-to-many][has-many :through relation]]
#+begin_src bash

$ rails new onsappelle-ror
$ cd onsappelle-ror

$ bin/rails generate model User email:string
$ bin/rails generate model Reminder date:datetime
$ bin/rails generate model UserReminder user:references reminder:references

$ bin/rails db:migrate

$ bin/rails generate controller Reminders index
$ bin/rails generate controller Users
#+end_src
[[https://guides.rubyonrails.org/action_mailer_basics.html][generating a mailer]]
#+begin_src bash
bin/rails generate mailer User
#+end_src
[[https://guides.rubyonrails.org/active_record_migrations.html#adding-new-columns][adding new columns]]
#+begin_src bash
bin/rails generate migration AddDetailsToReminder description:string sent:datetime confirmed:datetime
bin/rails db:migrate
#+end_src

#+begin_src bash
bin/rails generate migration AddLocaleToReminder locale:string
bin/rails db:migrate
#+end_src

(in case we need to generate passwordless views)
#+begin_src bash
bin/rails generate passwordless:views
      create  app/views/passwordless/mailer/sign_in.text.erb
      create  app/views/passwordless/sessions/new.html.erb
      create  app/views/passwordless/sessions/show.html.erb
#+end_src


** gmail
choose 2 factor authentication and use app password
** use postgres for local development
[[https://www.digitalocean.com/community/tutorials/how-to-use-postgresql-with-your-ruby-on-rails-application-on-ubuntu-20-04][guide on digitalocean]]
#+begin_src bash
sudo apt update
sudo apt install postgresql postgresql-contrib libpq-dev
#+end_src
*** fix some ubuntu problems...
#+begin_src bash
# installation fails
Setting up sysstat (12.5.2-2ubuntu0.2) ...
dpkg: error processing package sysstat (--configure):
 installed sysstat package post-installation script subprocess returned error exit status 10
 ...

sudo apt upgrade
# gah
sudo apt upgrade --fix-missing

# must have tried install again
...
Setting up ufw (0.36.1-4ubuntu0.1) ...
dpkg: error processing package ufw (--configure):
 installed ufw package post-installation script subprocess returned error exit status 10
Setting up postgresql-common (238) ...
dpkg: error processing package postgresql-common (--configure):
 installed postgresql-common package post-installation script subprocess returned error exit status 10
Setting up sysstat (12.5.2-2ubuntu0.2) ...

            rrors were encountered while processing:
 ufw
 postgresql-common
 sysstat
 postgresql-14
 postgresql-contrib
 postgresql
#+end_src
https://askubuntu.com/questions/1241362/fix-package-post-installation-script-subprocess-returned-error-exit-status-10-fo
#+begin_src
sudo rm /var/lib/dpkg/info/ufw*
sudo dpkg --configure -D 777 ufw
sudo apt -f install

sudo rm /var/lib/dpkg/info/postgresql-common*
sudo dpkg --configure -D 777 postgresql-common
sudo apt -f install

sudo rm /var/lib/dpkg/info/sysstat*
sudo dpkg --configure -D 777 sysstat
sudo apt -f install
#+end_src
*** set up postgres
[[https://www.cybertec-postgresql.com/en/postgresql-on-wsl2-for-windows-install-and-setup/][postgres on wsl2]]
#+begin_src bash
# not using systemctl because WSL2 doesn’t use systemd to operate:
sudo service postgresql start
sudo -u postgres createuser -s andre -P
#+end_src
set password for test and development dbs in [[file:config/database.yml::password: ENV\['DEV_DATABASE_PASSWORD'\]][database.yml]]
#+begin_src bash
bin/rails db:create
bin/rails db:migrate
#+end_src
** cron jobs with whenever
https://github.com/javan/whenever
https://dev.to/risafj/cron-jobs-in-rails-a-simple-guide-to-actually-using-the-whenever-gem-now-with-tasks-2omi
configure it in [[file:Gemfile::gem 'whenever', require: false][Gemfile]]
#+begin_src bash
bundle install
bundle exec wheneverize .
#+end_src
this creates [[file:config/schedule.rb][config/schedule.rb]]
where you can define cron tasks
#+begin_src bash
whenever --update-crontab --set environment='development'
# see your personal cron jobs
crontab -l
# in wsl, start crontab with service
sudo service cron start
#+end_src

but cron isn't so good for containers apparently
*** supercronic: cron for containers
https://fly.io/docs/app-guides/supercronic/
In the root of your project, add a crontab file.
#+begin_src
touch ./crontab
#+end_src

I take what whenever generated before,
but the paths need to be changed
to match the server setup
#+begin_src bash
crontab -l > ./crontab
#+end_src


 the guide seems a bit outdated (?),
 so I took some inspiration from the sidekiq doc too
 https://fly.io/docs/rails/the-basics/sidekiq/
see [[file:Dockerfile::SUPERCRONIC START][Dockerfile]] and [[file:fly.toml::\[processes\]][fly.toml]]

#+begin_src toml
[processes]
  app = "bin/rails server"
  cron = "supercronic /rails/crontab"
#+end_src
Fly creates one machine per process,
and its command is passed to [[file:bin/docker-entrypoint][docker-entrypoint]]
instead of CMD at the end of [[file:Dockerfile::CMD \["./bin/rails", "server"\]][Dockerfile]]
(ENTRYPOINT and CMD [[https://www.baeldung.com/ops/dockerfile-run-cmd-entrypoint][explained at baeldung]])

#+begin_src
cd deployment_dir
fly deploy
fly scale count app=1 cron=1
#+end_src
*** connecting to the cron machine
#+begin_src bash
fly ssh console --machine cron -g cron
#+end_src
* language server

** finally chose ruby-lsp
** solargraph
https://emacs-lsp.github.io/lsp-mode/page/lsp-solargraph/
https://github.com/castwide/solargraph
https://github.com/iftheshoefritz/solargraph-rails/
#+begin_src bash
gem install solargraph
gem install solargraph-rails
#+end_src
